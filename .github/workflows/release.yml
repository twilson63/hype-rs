name: Release

permissions:
  contents: write

on:
  push:
    tags:
      - v[0-9]+.*

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      has-releases: ${{ steps.create-release.outputs.has-releases }}
      release-version: ${{ env.RELEASE_VERSION }}
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Get release version
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
      - name: Create GitHub release
        id: create-release
        run: |
          gh release create "$RELEASE_VERSION" \
            --draft \
            --title "$RELEASE_VERSION" \
            --generate-notes
          echo "has-releases=true" >> $GITHUB_OUTPUT

  upload-artifacts:
    needs: create-release
    if: needs.create-release.outputs.has-releases == 'true'
    strategy:
      fail-fast: false
      max-parallel: 3
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
          - target: x86_64-apple-darwin
            os: macos-13
          - target: aarch64-apple-darwin
            os: macos-14
          # TODO: Add musl and ARM64 Linux builds with rustls or cross tool
          # - target: x86_64-unknown-linux-musl
          #   os: ubuntu-latest
          # - target: aarch64-unknown-linux-gnu
          #   os: ubuntu-latest
    runs-on: ${{ matrix.os }}
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      RELEASE_VERSION: ${{ needs.create-release.outputs.release-version }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      - name: Install cross-compilation tools
        if: contains(matrix.target, 'linux')
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools
          if [ "${{ matrix.target }}" = "aarch64-unknown-linux-gnu" ]; then
            sudo apt-get install -y gcc-aarch64-linux-gnu
          fi
      - name: Build release binary
        run: |
          cargo build --release --target ${{ matrix.target }}
      - name: Create archive
        run: |
          cd target/${{ matrix.target }}/release
          if [[ "${{ matrix.os }}" == "windows"* ]]; then
            ARCHIVE="hype-${{ matrix.target }}.zip"
            7z a "$ARCHIVE" hype.exe
          else
            ARCHIVE="hype-${{ matrix.target }}.tar.gz"
            tar czf "$ARCHIVE" hype
          fi
          echo "ARCHIVE=$ARCHIVE" >> $GITHUB_ENV
          cd ../../..
          mv "target/${{ matrix.target }}/release/$ARCHIVE" .
      - name: Generate checksum
        run: |
          shasum -a 256 "$ARCHIVE" > "$ARCHIVE.sha256"
      - name: Upload release assets
        run: |
          gh release upload "$RELEASE_VERSION" \
            "$ARCHIVE" \
            "$ARCHIVE.sha256"

  publish-release:
    needs: [create-release, upload-artifacts]
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      RELEASE_VERSION: ${{ needs.create-release.outputs.release-version }}
    steps:
      - uses: actions/checkout@v4
      - name: Publish release
        run: |
          gh release edit "$RELEASE_VERSION" --draft=false
