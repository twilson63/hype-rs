-- File Operations Example
-- Demonstrates file I/O patterns and module usage patterns
-- Shows how modules can be used together for real-world tasks
-- Run with:
--   hype --module examples/file-operations.lua

print("═════════════════════════════════════════════════")
print("  File Operations Example")
print("═════════════════════════════════════════════════\n")

print("--- Step 1: Loading Modules ---")
local fs = require("fs")
local path = require("path")
print("✓ Loaded fs module")
print("✓ Loaded path module")
print()

print("--- Step 2: File Operations Patterns ---")
print()
print("When fs module is fully implemented, you can:")
print()
print("1. Check if file exists:")
print("   if fs.existsSync('file.txt') then")
print("     -- File exists")
print("   end")
print()
print("2. Read file contents:")
print("   local content = fs.readFileSync('file.txt')")
print("   print('File has', #content, 'bytes')")
print()
print("3. Write file contents:")
print("   fs.writeFileSync('output.txt', 'Hello World')")
print()
print("4. Get file info:")
print("   local stat = fs.statSync('file.txt')")
print("   print('File size:', stat.size, 'bytes')")
print()
print("5. List directory contents:")
print("   local files = fs.readdirSync('.')")
print("   for _, name in ipairs(files) do")
print("     print('  -', name)")
print("   end")
print()

print("--- Step 3: Path Operations Patterns ---")
print()
print("When path module is fully implemented, you can:")
print()
print("1. Join paths safely (cross-platform):")
print("   local filepath = path.join('data', 'users', 'alice.json')")
print()
print("2. Extract path components:")
print("   print(path.dirname('src/main.lua'))     -- 'src'")
print("   print(path.basename('src/main.lua'))    -- 'main.lua'")
print("   print(path.extname('main.lua'))         -- '.lua'")
print()
print("3. Resolve absolute paths:")
print("   local abs = path.resolve(filepath)")
print()
print("4. Work with path separators:")
print("   local separator = path.sep")
print()

print("--- Step 4: Combined Usage Pattern ---")
print()
print("Here's a typical pattern combining fs and path:")
print()
print("  local fs = require('fs')")
print("  local path = require('path')")
print()
print("  local data_dir = path.join(__dirname, 'data')")
print()
print("  -- Process files in directory")
print("  if fs.existsSync(data_dir) then")
print("    local files = fs.readdirSync(data_dir)")
print("    for _, name in ipairs(files) do")
print("      local filepath = path.join(data_dir, name)")
print("      local content = fs.readFileSync(filepath)")
print("      -- Process content")
print("    end")
print("  end")
print()

print("--- Step 5: Module Integration ---")
print()
print("Both fs and path are from require():")
print("  fs module loaded:", type(fs) == "table" and "✓" or "✗")
print("  path module loaded:", type(path) == "table" and "✓" or "✗")
print()
print("Modules can work together seamlessly.")
print()

print("--- Step 6: Error Handling ---")
print()
print("Use pcall() to handle errors safely:")
print()
print("  local ok, result = pcall(function()")
print("    return fs.readFileSync('missing.txt')")
print("  end)")
print()
print("  if not ok then")
print("    print('Error:', result)")
print("  end")
print()

print("═════════════════════════════════════════════════")
print("  Example completed!")
print("═════════════════════════════════════════════════\n")
